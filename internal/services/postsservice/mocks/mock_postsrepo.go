// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victor-nach/postr-backend/internal/services/postsservice (interfaces: postsRepo)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_postsrepo.go -package=mocks github.com/victor-nach/postr-backend/internal/services/postsservice postsRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/victor-nach/postr-backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockpostsRepo is a mock of postsRepo interface.
type MockpostsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockpostsRepoMockRecorder
	isgomock struct{}
}

// MockpostsRepoMockRecorder is the mock recorder for MockpostsRepo.
type MockpostsRepoMockRecorder struct {
	mock *MockpostsRepo
}

// NewMockpostsRepo creates a new mock instance.
func NewMockpostsRepo(ctrl *gomock.Controller) *MockpostsRepo {
	mock := &MockpostsRepo{ctrl: ctrl}
	mock.recorder = &MockpostsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostsRepo) EXPECT() *MockpostsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpostsRepo) Create(ctx context.Context, post *domain.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockpostsRepoMockRecorder) Create(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpostsRepo)(nil).Create), ctx, post)
}

// Delete mocks base method.
func (m *MockpostsRepo) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockpostsRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpostsRepo)(nil).Delete), ctx, id)
}

// ListByUserID mocks base method.
func (m *MockpostsRepo) ListByUserID(ctx context.Context, userId string) ([]domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userId)
	ret0, _ := ret[0].([]domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockpostsRepoMockRecorder) ListByUserID(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockpostsRepo)(nil).ListByUserID), ctx, userId)
}
